setwd("~/Dropbox/_Projects/ManyBabies/manybabies-analysis")
---
title: "ManyBabies 1: Pilot Data Analysis"
author: "Mike Frank (edits by Hugh Rabagliati and Melissa Kline)"
output:
html_document:
toc: true
number_sections: true
code_folding: hide
highlight: tango
theme: spacelab
---
This document shows an analysis of MB1 pilot data for purposes of procedural and analytic decision-making. It includes analysis of demographics and looking times, as well as condition differences. *Condition differences (i.e., analyses of IDS preference) are included for purposes of analysis planning and should not be used for modification of procedure.*
Please forgive errors, omissions, lack of clearly labeled axes, etc. This document was produced quickly to provide an initial guide for decision-making.
There are many decision-points that need to be discussed throughout. Among them:
- What format to ask for data in?
- What to do with minimum looking time trials (e.g., record as 2s, record as 0s, exclude)
- What trials to include in the analysis (e.g., should we include non-looking trials at the end of the experiemnt)?
What if any modifications/clarifications to procedure should we make based on the pilot? *sorry if any of this was already discussed/decided -mk*
- Trial ordering: looks like many labs will use the 'small set of randomized lists' approach; to avoid odd item/trial effects it would be good if 12345678 was not everyone's base list.
- Trial naming: what counts as a trial?  E.g. is IDS5 followed by ADS5 'trial 1, trial 2', or is it 'trial 1, order IDSfirst' This is currently inconsistent between labs.
```{r Preliminaries, results = "hide", message = FALSE}
options(dplyr.width = Inf)
knitr::opts_chunk$set(message = FALSE, warning = FALSE, cache=TRUE)
library(lme4)
library(tidyverse)
library(eyetrackingR)
library(stringr)
library(lubridate)
library(bit64) # necessary because of times from SMI > max integer size
library(langcog)
library(knitr)
library(forcats)
source("et_helper.R")
theme_set(theme_bw())
```
# Load data
Loading process to standardize pilot data from each lab. Current desideratum is a long-form data sheet with columns:
- `lab` [string] - unique identifier
- `method` [string] - `eye-tracking`, `HPP`, `single screen`
- `subid` [string] - unique within-lab ID
- `age_days` [integer] - chronological age
- `trial_type` [string] - `IDS`, `ADS`, and `training`
- `trial_num` [integer] - trial number, from 1 -- 8 (with -2 and -1 denoting training trials)
- `trial_order` [string] - which stim version played first, `IDSfirst` or `ADSfirst` *or label trials 1---16 for individual sounds*
- `stim_name` [string] - specific stimulus, eg. `ADS-5`
- `looking_time` [double] - looking time in seconds
In general, we probably want to have three different spreadsheets:
- `labs` - this has lab and method info
- `subjects` - this has demographics for each subject
- `trials` - this has long-form trial data
Then these can be merged appropriately.
_Questions_:
- Do we want order in here? Probably. *yes -mk*
- Do we want specific stimulus? Likely yes as well. *agree*
## Frank data
Read in eye-tracker pilot data.
```{r}
raw_data_path <- "pilot/frank/"
info_path <- "info/"
processed_data_path <- "processed_data/frank/"
all_data <- dir(raw_data_path, pattern="*.txt") %>%
paste0(raw_data_path, .) %>%
map_df(get_smi_header) %>%
split(.$file_name) %>%
map_df(read_smi_idf) %>%
split(.$file_name) %>%
map_df(preprocess_data)
```
Now extract trial numbers and match with stimuli.
Some items to be fixed:
- Currently we're not actually matching stimuli to trials (this will require parsing eye-tracker XML output)
- We're missing trial ADS-7; that's a (major) oversight from the experimental setup.
- Right now I clip trial < 5, which trims out the two training trials.
```{r}
frank_data <- all_data %>%
group_by(file_name, trial, stimulus) %>%
summarise(looking_time = max(t_stim)) %>%
mutate(trial_cat = ifelse(str_detect(stimulus, ".jpg"), "speech","other")) %>%
filter(trial_cat == "speech") %>%
group_by(file_name) %>%
filter(trial > 5) %>%
mutate(trial_num = 1:n(),
subid = str_replace(str_replace(file_name,raw_data_path,""),
".txt",""))
```
Now merge in demographic information.
```{r}
info <- read_csv("info/frank_demo.csv")
frank_data <- info %>%
select(subid, age, order) %>%
left_join(frank_data)
```
Now merge in orders.
